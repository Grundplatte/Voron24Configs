#####################################################################
# 	PRINT START / END
#####################################################################

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customize for your slicer of choice
variable_bedtemp: 0
variable_hotendtemp: 0
variable_chambertemp: 0
gcode:
  {% set bed = params.BED|default(100)|float %}
  {% set extruder = params.EXTRUDER|default(240)|float %}
  {% set chamber = params.CHAMBER|default(15)|float %}

	# Set the parameters as persistent variables so they can be referenced outside of the macro (in PRINT_END)
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={bed}	
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotendtemp VALUE={extruder}	
	SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chambertemp VALUE={chamber}	

	UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0      		; cancel off timer (if there is one)
	RESETSPEEDS																							; reset speed, accel etc to configured values

	# ellis
#	{% if printer["temperature_sensor enclosure_temp"].temperature < chamber %}								; - if chamber is not at temp yet:
		HEATSOAK T={bed} MOVE=1																			; 	heatsoak macro + park in center
		M190 S{bed} 
		; soak for 15min
		{% for timer in range( (bed/4-12)|int,0,-1) %}   ; we cycle once a minute, so we can send an update
				M117 Soak: {timer|int}m remaining
				M105
				G4 P60000 # wait 1 minute
		{% endfor %}																					; 	wait for bed final temp
#		TEMPERATURE_WAIT SENSOR="temperature_sensor enclosure_temp" MINIMUM={chamber}							; 	wait for chamber final temp
#	{% else %}																							; - if chamber is already at temp:
#		{% if printer.heater_bed.temperature < (bed-2) %}												; -- but bed is not fully heated (within 2C):
#			HEATSOAK T={bed} MOVE=1																		; 		heatsoak and park
#			M190 S{bed} 																				; 		wait for bed final temp
#		{% else %}																						; -- and bed is already heated:
#			HEATSOAK T={bed} MOVE=0																		; 		"heatsoak" without parking (only still calling this because it does some other things like turn off exahaust fan)
#		{% endif %}
#	{% endif %}
	M106 S0																				 ; turn off part cooling fan (from heatsoak)
	BED_MESH_CLEAR																 ; clear bed mesh
	QUAD_GANTRY_LEVEL
	G28 Z																					 ; home z
	G90 													 								 ; absolute positioning
	#BED_MESH_CALIBRATE ADAPTIVE=1
	#G28 Z																					 						; home z again
	G0 X110 Z20 Y{printer.toolhead.axis_maximum.y} F19500			; move to right of nozzle brush
	M109 S{extruder} 																						; set & wait for hotend final temp
	CLEANNOZZLE																								; clean nozzle while hot
	#TEMPADJUSTPA																							; change PA based on bed temp
	G92 E0                              											; reset Extruder

	# prime line for ABS, requires max_extrude_cross_section: 5 or greater under [extruder]
	# originally Stephan#8358 and unknown
	{% if bed >= 100 %}
		G92 E0                                       ; reset extruder
		G0 X3 Y3 Z0.90 F19500                        ; move to left corner of bed
		G1 X25 Y3 E40 F100                           ; extrude thicc line
		G1 X30 F18000                                ; hop over to clear nozzle
		G92 E0                                       ; reset extruder
	## catch-all
	{% else %}
		G92 E0                                       ; reset extruder
		G0 Y0 X40                                    ; go to tongue of print bed
		G1 Z0.2 F500                                 ; move bed to nozzle
		G1 E4 F500                                   ; pre-purge prime LENGTH SHOULD MATCH YOUR PRINT_END RETRACT
		G1 X80 E8 F500                               ; intro line 1
		G1 Y0.3                                      ; move in a little
		G1 X40 E8 F500                               ; second line
		G1 Z2                                        ; move nozzle to prevent scratch
		G92 E0                                       ; reset extruder
	{% endif %}

	M117 Printing

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customize for your slicer of choice
gcode:
	CLEAR_PAUSE										 ; clear pause (from M191) if there is one
	M400                           ; wait for buffer to clear
	G92 E0                         ; zero the extruder
	G1 E-4.0 F3600                 ; retract filament
	G91                            ; relative positioning

	#   Get Boundaries
	{% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
	{% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
	{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

	#   Check end position to determine safe direction to move
	{% if printer.toolhead.position.x < (max_x - 20) %}
			{% set x_safe = 20.0 %}
	{% else %}
			{% set x_safe = -20.0 %}
	{% endif %}

	{% if printer.toolhead.position.y < (max_y - 20) %}
			{% set y_safe = 20.0 %}
	{% else %}
			{% set y_safe = -20.0 %}
	{% endif %}

	{% if printer.toolhead.position.z < (max_z - 2) %}
			{% set z_safe = 2.0 %}
	{% else %}
			{% set z_safe = max_z - printer.toolhead.position.z %}
	{% endif %}

	G0 Z{z_safe} F3600                                    ; move nozzle up
	G0 X{x_safe} Y{y_safe} F20000                         ; move nozzle to remove stringing
	TURN_OFF_HEATERS
	M107                                                  ; turn off fan
	G90                                                   ; absolute positioning
	G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F19500.0  					; park nozzle at rear
	BED_MESH_CLEAR																				; clear bed mesh							
	RESETSPEEDS																						; reset speed, accel etc to configured max values
	M117

#####################################################################
# 	PRINT PAUSE / RESUME / CANCEL
#####################################################################

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

# Pause and park toolhead at front center. Z hop by 10mm.
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
	# Parameters
	{% set z = params.Z|default(10)|int %}																					; z hop amount
	
	{% if printer['pause_resume'].is_paused|int == 0 %}		
		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}									    						; set z hop variable for reference in resume macro
		SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}									; set hotend temp variable for reference in resume macro
								
		SAVE_GCODE_STATE NAME=PAUSE																							; save current print position for resume				
		BASE_PAUSE																											; pause print
		{% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}										; check that zhop doesn't exceed z max
			G91																												; relative positioning
			G1 Z{z} F900																									; raise Z up by z hop amount
		{% else %}
			{ action_respond_info("Pause zhop exceeds maximum Z height.") }													; if z max is exceeded, show message and set zhop value for resume to 0
			SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
		{% endif %}
		G90																													; absolute positioning
		G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F19500									; park toolhead at front center
		SAVE_GCODE_STATE NAME=PAUSEPARK																						; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)	
		M104 S0																												; turn off hotend
		SET_IDLE_TIMEOUT TIMEOUT=43200															    						; set timeout to 12 hours
	{% endif %}

# Return Z hop back down 10mm, prime nozzle, resume print.
[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
	# Parameters
	{% set e = params.E|default(2.5)|int %}
	
	{% if printer['pause_resume'].is_paused|int == 1 %}
		SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}											; set timeout back to configured value
		{% if etemp > 0 %}
			M109 S{etemp|int}																								; wait for hotend to heat back up
		{% endif %}
		RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=450															; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)	
		G91																													; relative positioning
		M83																													; relative extruder positioning
		{% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}												
			G1 Z{zhop * -1} E{e} F900																						; prime nozzle by E, lower Z back down
		{% else %}						
			G1 Z{zhop * -1} F900																							; lower Z back down	without priming (just in case we are testing the macro with cold hotend)
		{% endif %}								
		RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=450																; restore position
		BASE_RESUME																											; resume print
	{% endif %}

#####################################################################
# 	FLUIDD WEB MACROS
#####################################################################
# These are specified as macros just so they show up in Fluidd/Mainsail.

[gcode_macro SETPA]
gcode:
	# Parameters
	{% set pa = params.PA|default(0)|float %}

	SET_PRESSURE_ADVANCE ADVANCE={pa}

[gcode_macro SETPASMOOTH]
gcode:
	# Parameters
	{% set smooth = params.SMOOTH|default(0)|float %}
	
	SET_PRESSURE_ADVANCE SMOOTH_TIME={smooth}

#####################################################################
# 	MISC
#####################################################################

# Replace M109 (Wait for Hotend Temperature) with TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M109]
rename_existing: M99109
gcode:
	#Parameters
	{% set s = params.S|float %}
	
	M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+5}

[gcode_macro RESETSPEEDS]
gcode:
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} 
	SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel}  
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity} 

[gcode_macro G32]
gcode:
	G28
	ATTACH_PROBE_LOCK
	BED_MESH_CLEAR
	QUAD_GANTRY_LEVEL
	G28 Z
	DOCK_PROBE_UNLOCK

[gcode_macro HEATSOAK]
gcode:
	# Parameters
	{% set t = params.T|default(110)|int %}
	{% set move = params.MOVE|default(1)|int %}

	UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0  ; cancel off timer (if there is one)
	M140 S{t}										; heat bed
	{% if t >= 100 %}
		M104 S150									; set hotend to no-ooze temp
		M106 S205 									; turn on part fan (80%)
	{% else %}
		M106 S0 									; turn part fan off
	{% endif %}
	{% if move == 1 %}
		CG28										; conditional home
		PARKCENTER						 			; move to bed
	{% endif %}

[gcode_macro BRUSH]
description: Clean nozzle with brush
gcode:
  G28
  QUAD_GANTRY_LEVEL
  G28
  G90                           ; absolute positioning
  G0  X90 Y300 Z20 F3600        ; move nozzle to brush
  G0  Z5 F3600                  ; move nozzle into brush
  G0  X60 F7800                 ; move left
  G0  X90 F7800                 ; move right
  G0  X60 F7800                 ; move left
  G0  X90 F7800                 ; move right
  G0  X60 F7800                 ; move left
  G0  X90 F7800                 ; move right
  G0  Z20 F3600                  ; move nozzle out of brush
	
[delayed_gcode DELAYED_OFF]
gcode:
	OFF  															; call "OFF" macro, to turn off everything (heaters, motors, lights, fans)
	
[gcode_macro CLEANNOZZLE]
gcode:
	# Parameters
	# Iterations
	{% set i = params.I|default(5)|int %}
	# Speed
	{% set s = params.S|default(100)|int %}
	
	CG28
	SAVE_GCODE_STATE NAME=CLEANNOZZLE
	STATUS_CLEANING ; set leds
	G90																; absolute positioning
	G0 X110 Z20 Y{printer.toolhead.axis_maximum.y} F19500			; move to right of nozzle brush
	G0 Z5 F19500													; move down to nozzle brush
	{% for iteration in range(i|int) %}
		G0 X60 F{s*60}												; wipe back
		G0 X90	F{s*60}												; wipe forth
	{% endfor %}
	G0 X110	F{s*60}													; wipe back
	G0 Z20 F19500													; raise
	STATUS_READY
	RESTORE_GCODE_STATE NAME=CLEANNOZZLE
	
[gcode_macro SWIPENOZZLE]
gcode:
	CG28
	SAVE_GCODE_STATE NAME=SWIPENOZZLE
	STATUS_CLEANING
	G90																; absolute positioning
	G0 X110 Z10 Y{printer.toolhead.axis_maximum.y} F19500 			; move to right of nozzle brush
	G0 Z5	F19500													; lower
	G0 X60 F2400													; wipe back
	G0 Z10	F19500													; raise
	STATUS_READY
	RESTORE_GCODE_STATE NAME=SWIPENOZZLE

#####################################################################
# 	FILAMENT CONTROL
#####################################################################

[gcode_macro UNLOAD_FILAMENT]
gcode:
	SAVE_GCODE_STATE NAME=UNLOADFILAMENT
	M83                                   ; set extruder to relative
	G1 E10 F600                           ; extrude a little to soften tip 
	G1 E-100 F1800                        ; retract filament completely
	RESTORE_GCODE_STATE NAME=UNLOADFILAMENT

[gcode_macro LOAD_FILAMENT]
gcode:
	SAVE_GCODE_STATE NAME=LOADFILAMENT
	STATUS_BUSY
	M83 ; set extruder to relative
	G1 E90 F600
	STATUS_READY
	RESTORE_GCODE_STATE NAME=LOADFILAMENT
   
[gcode_macro HOT_UNLOAD]
gcode:
	# Parameters
	{% set t = params.T|default(240)|int %}
	STATUS_BUSY
	M104 S{t}
	PARKFRONT
	M109 S{t}
    UNLOAD_FILAMENT
	STATUS_READY
	
[gcode_macro HOT_LOAD]
gcode:
	# Parameters
	{% set t = params.T|default(240)|int %}
	
	M104 S{t}
	PARKFRONT
	M109 S{t}
    LOAD_FILAMENT

#####################################################################
# 	CONDITIONAL HOMING
#####################################################################

# Conditional G28 XYZ (home if not already homed)
[gcode_macro CG28]
gcode:
	{% if "xyz" not in printer.toolhead.homed_axes %}
		STATUS_HOMING
		# we need to clear bed mesh to be able to move
		G91
		BED_MESH_CLEAR
		G28
		STATUS_READY
	{% endif %}

# Conditional G28 XY (home if not already homed)
[gcode_macro XYCG28]
gcode:
	{% if "xy" not in printer.toolhead.homed_axes %}
		G28 X Y
	{% endif %}

# Conditional G28 Z (home if not already homed)
[gcode_macro ZCG28]
gcode:
	{% if "z" not in printer.toolhead.homed_axes %}
		G28 Z
	{% endif %}

#####################################################################
# 	PARKING
#####################################################################

# Park front center
[gcode_macro PARKFRONT]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F19500		
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
# Park front center, but low down
[gcode_macro PARKFRONTLOW]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKFRONT
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F19500										
	RESTORE_GCODE_STATE NAME=PARKFRONT
	
# Park top rear left
[gcode_macro PARKREAR]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKREAR
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F19500		
	RESTORE_GCODE_STATE NAME=PARKREAR

# Park center of build volume
[gcode_macro PARKCENTER]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKCENTER
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F19500	
	RESTORE_GCODE_STATE NAME=PARKCENTER
	
# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
	CG28                                  																						; home if not already homed
	SAVE_GCODE_STATE NAME=PARKBED
	G90                                   																						; absolute positioning
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F19500										
	RESTORE_GCODE_STATE NAME=PARKBED
	
#####################################################################
# 	ALIASES / SHORTCUTS
#####################################################################

[gcode_macro QGL]
gcode:
	BED_MESH_CLEAR
	QUAD_GANTRY_LEVEL
	
[gcode_macro BMC]
gcode:
	BED_MESH_CALIBRATE
	
# Convert Marlin linear advance commands to SET_PRESSURE_ADVANCE.
# Used in conjunction with Marlin's linear advance calibration tool: https://marlinfw.org/tools/lin_advance/k-factor.html
[gcode_macro M900]
gcode:
	# Parameters
	{% set k = params.K|default(0)|float %}
	
	SET_PRESSURE_ADVANCE ADVANCE={k}

# Just a shortcut to turn EVERYTHING off with one command (beds, heaters, motors, lights)
[gcode_macro OFF]
gcode:
	M84												; turn steppers off
  TURN_OFF_HEATERS					; turn bed / hotend off
  M107                      ; turn print cooling fan off
	#SET_FAN_SPEED FAN=BedOuter SPEED=0				; bed fan off
	#SET_FAN_SPEED FAN=BedInner SPEED=0				; bed fan off
	#SET_PIN PIN=caselight VALUE=0					; turn light off

[gcode_macro QUERY_BME280]
gcode:
    {% set sensor = printer["bme280 enclosure_temp"] %}
    {action_respond_info(
        "Temperature: %.2f C\n"
        "Pressure: %.2f hPa\n" % (
            sensor.temperature,
            sensor.pressure))}

[gcode_macro HEATSOAK]
gcode:
	# Parameters
	{% set t = params.T|default(110)|int %}
	{% set move = params.MOVE|default(1)|int %}

	UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0  ; cancel off timer (if there is one)
	M140 S{t}										; heat bed
	{% if t >= 100 %}
		M104 S150									; set hotend to no-ooze temp
		M106 S205 									; turn on part fan (80%)
	{% else %}
		M104 S100									; set hotend to no-ooze temp
		M106 S0 									; turn part fan off
	{% endif %}
	{% if move == 1 %}
		CG28										; conditional home
		PARKCENTER						 			; move to bed
	{% endif %}